{"ast":null,"code":"var _jsxFileName = \"D:\\\\work\\\\Tushar-Project\\\\src\\\\components\\\\movie-grid\\\\MovieGrid.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport Button, { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieGrid = props => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      if (keyword === undefined) {\n        const params = {};\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            break;\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n    getList();\n  }, [props.category, keyword]);\n  const loadMore = async () => {\n    let response = null;\n    if (keyword === undefined) {\n      const params = {\n        page: page + 1\n      };\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          break;\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    }\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: props.category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        category: props.category,\n        item: item\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 44\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onClick: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true);\n};\n_s(MovieGrid, \"gVKJykNS0ZZmAcVWR7yk7gRUMnQ=\", false, function () {\n  return [useParams];\n});\n_c = MovieGrid;\nconst MovieSearch = props => {\n  _s2();\n  const history = useHistory();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const goToSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`/${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n      if (e.keyCode === 13) {\n        goToSearch();\n      }\n    };\n    document.addEventListener('keyup', enterEvent);\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, goToSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter keyword\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"small\",\n      onClick: goToSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s2(MovieSearch, \"I2NExLrNnOoAB+SPN4V+sg7kpxQ=\", false, function () {\n  return [useHistory];\n});\n_c2 = MovieSearch;\nexport default MovieGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useHistory","useParams","MovieCard","Button","OutlineButton","Input","tmdbApi","category","movieType","tvType","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","undefined","params","movie","getMoviesList","upcoming","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","goToSearch","trim","length","push","enterEvent","e","preventDefault","keyCode","document","addEventListener","removeEventListener","target","value"],"sources":["D:/work/Tushar-Project/src/components/movie-grid/MovieGrid.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\nimport './movie-grid.scss';\r\n\r\nimport MovieCard from '../movie-card/MovieCard';\r\nimport Button, { OutlineButton } from '../button/Button';\r\nimport Input from '../input/Input'\r\n\r\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\r\n\r\nconst MovieGrid = props => {\r\n\r\n    const [items, setItems] = useState([]);\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [totalPage, setTotalPage] = useState(0);\r\n\r\n    const { keyword } = useParams();\r\n\r\n    useEffect(() => {\r\n        const getList = async () => {\r\n            let response = null;\r\n            if (keyword === undefined) {\r\n                const params = {};\r\n                switch(props.category) {\r\n                    case category.movie:\r\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                        break;\r\n                    default:\r\n                        response = await tmdbApi.getTvList(tvType.popular, {params});\r\n                }\r\n            } else {\r\n                const params = {\r\n                    query: keyword\r\n                }\r\n                response = await tmdbApi.search(props.category, {params});\r\n            }\r\n            setItems(response.results);\r\n            setTotalPage(response.total_pages);\r\n        }\r\n        getList();\r\n    }, [props.category, keyword]);\r\n\r\n    const loadMore = async () => {\r\n        let response = null;\r\n        if (keyword === undefined) {\r\n            const params = {\r\n                page: page + 1\r\n            };\r\n            switch(props.category) {\r\n                case category.movie:\r\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params});\r\n                    break;\r\n                default:\r\n                    response = await tmdbApi.getTvList(tvType.popular, {params});\r\n            }\r\n        } else {\r\n            const params = {\r\n                page: page + 1,\r\n                query: keyword\r\n            }\r\n            response = await tmdbApi.search(props.category, {params});\r\n        }\r\n        setItems([...items, ...response.results]);\r\n        setPage(page + 1);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"section mb-3\">\r\n                <MovieSearch category={props.category} keyword={keyword}/>\r\n            </div>\r\n            <div className=\"movie-grid\">\r\n                {\r\n                    items.map((item, i) => <MovieCard category={props.category} item={item} key={i}/>)\r\n                }\r\n            </div>\r\n            {\r\n                page < totalPage ? (\r\n                    <div className=\"movie-grid__loadmore\">\r\n                        <OutlineButton className=\"small\" onClick={loadMore}>Load more</OutlineButton>\r\n                    </div>\r\n                ) : null\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst MovieSearch = props => {\r\n\r\n    const history = useHistory();\r\n\r\n    const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\r\n\r\n    const goToSearch = useCallback(\r\n        () => {\r\n            if (keyword.trim().length > 0) {\r\n                history.push(`/${category[props.category]}/search/${keyword}`);\r\n            }\r\n        },\r\n        [keyword, props.category, history]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const enterEvent = (e) => {\r\n            e.preventDefault();\r\n            if (e.keyCode === 13) {\r\n                goToSearch();\r\n            }\r\n        }\r\n        document.addEventListener('keyup', enterEvent);\r\n        return () => {\r\n            document.removeEventListener('keyup', enterEvent);\r\n        };\r\n    }, [keyword, goToSearch]);\r\n\r\n    return (\r\n        <div className=\"movie-search\">\r\n            <Input\r\n                type=\"text\"\r\n                placeholder=\"Enter keyword\"\r\n                value={keyword}\r\n                onChange={(e) => setKeyword(e.target.value)}\r\n            />\r\n            <Button className=\"small\" onClick={goToSearch}>Search</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieGrid;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}